


export enum RecipeStatus {
  PendingReviewPortal = 'Pendiente Revisión - Portal',
  PendingValidation = 'Pendiente Validación',
  Validated = 'Validada',
  Rejected = 'Rechazada',
  SentToExternal = 'Enviada a Recetario',
  Preparation = 'En Preparación',
  ReceivedAtSkol = 'Recepcionado en Skol',
  ReadyForPickup = 'Lista para Retiro',
  Dispensed = 'Dispensada',
  Cancelled = 'Anulada',
}

export enum ProactivePatientStatus {
  OK = 'OK', // No action needed
  ATTENTION = 'ATTENTION', // Needs attention, but not urgent
  URGENT = 'URGENT', // Urgent action required
}

export enum PatientActionNeeded {
  NONE = 'NONE',
  CREATE_NEW_RECIPE = 'CREATE_NEW_RECIPE',
  REPREPARE_CYCLE = 'REPREPARE_CYCLE',
  DISPENSE_COMMERCIAL = 'DISPENSE_COMMERCIAL',
}

export enum SkolSuppliedItemsDispatchStatus {
  Pending = 'Pendiente',
  PartiallyDispatched = 'Parcialmente Despachado',
  Dispatched = 'Despachado',
}

export enum DispatchStatus {
  Active = 'Activo',
  Received = 'Recibido',
  Cancelled = 'Cancelado',
}

export enum PharmacovigilanceReportStatus {
  New = 'Nuevo',
  UnderInvestigation = 'En Investigación',
  ActionRequired = 'Acción Requerida',
  Resolved = 'Resuelto',
  Closed = 'Cerrado',
}

export enum ControlledLogEntryType {
  MagistralDispensation = 'Dispensación Magistral',
  DirectSale = 'Venta Directa',
}

export interface ControlledSubstanceLogEntry {
  id: string;
  entryType: ControlledLogEntryType;
  dispensationDate: string; // ISO String
  internalFolio: string; // Auto-generated by Skol
  patientId: string;
  doctorId: string;
  medicationName: string; // Could be the recipe item name or inventory item name
  inventoryItemId?: string; // Link to inventory for commercial products
  recipeId?: string; // Link to recipe for magistral preparations
  quantityDispensed: number;
  quantityUnit: string;
  controlledType: 'Psicotrópico' | 'Estupefaciente';
  prescriptionFolio: string; // Folio from the physical/digital recipe
  prescriptionType: 'Receta Cheque' | 'Receta Retenida';
  retrievedBy_Name: string;
  retrievedBy_RUT: string;
  prescriptionImageUrl?: string;
}

export interface RecipeItem {
  principalActiveIngredient: string;
  pharmaceuticalForm: string;
  concentrationValue: string;
  concentrationUnit: string;
  dosageValue: string;
  dosageUnit: string;
  frequency: string;
  treatmentDurationValue: string;
  treatmentDurationUnit: string;
  totalQuantityValue: string;
  totalQuantityUnit: string;
  usageInstructions: string;
  requiresFractionation?: boolean;
}

export interface AuditTrailEntry {
  status: RecipeStatus;
  date: string; // ISO String
  userId: string;
  notes?: string;
}

export interface Recipe {
  id: string;
  patientId: string;
  doctorId: string;
  dispatchAddress?: string;
  items: RecipeItem[];
  status: RecipeStatus;
  paymentStatus: 'Pagado' | 'Pendiente' | 'N/A';
  rejectionReason?: string;
  dueDate: string; // ISO String
  createdAt: string; // ISO String
  updatedAt: string; // ISO String
  prescriptionDate: string; // ISO String
  externalPharmacyId?: string;
  supplySource?: 'Stock del Recetario Externo' | 'Insumos de Skol';
  preparationCost?: number;
  isControlled?: boolean;
  controlledRecipeType?: string;
  controlledRecipeFolio?: string;
  controlledRecipeImageUrl?: string;
  prescriptionImageUrl?: string;
  skolSuppliedItemsDispatchStatus?: SkolSuppliedItemsDispatchStatus;
  auditTrail?: AuditTrailEntry[];
  dispensationDate?: string; // ISO String
  internalPreparationLot?: string;
  compoundingDate?: string; // ISO String
  preparationExpiryDate?: string; // ISO String
  requiresFractionation?: boolean; // Legacy support
}

export interface AdverseReaction {
  medication: string;
  description: string;
}

export interface PharmacovigilanceReference {
  reportId: string;
  reportedAt: string;
  problemSummary: string;
  status: PharmacovigilanceReportStatus;
}

export interface Patient {
  id: string;
  name: string;
  rut: string;
  email: string;
  phone: string;
  address?: string;
  gender?: 'Masculino' | 'Femenino' | 'Otro';
  isChronic: boolean;
  preferredDispensationDay?: number;
  allergies?: string[];
  commercialMedications?: string[];
  adverseReactions?: AdverseReaction[];
  associatedDoctorIds?: string[];
  pharmacovigilanceEvents?: PharmacovigilanceReference[];
  // Legacy field, to be replaced by proactive fields
  chronicCareStatus: 'OK' | 'Atención' | 'Urgente';
  // New proactive fields
  proactiveStatus: ProactivePatientStatus;
  proactiveMessage: string;
  actionNeeded: PatientActionNeeded;
}

export interface Doctor {
  id: string;
  name: string;
  specialty: string;
  license?: string;
  rut?: string;
  email?: string;
  phone?: string;
}

export interface ExternalPharmacy {
  id: string;
  name: string;
  contactPerson?: string;
  email?: string;
  phone?: string;
  address?: string;
  paymentDetails?: string; // e.g., bank account info
  defaultPaymentModel?: 'Por Receta' | 'Factura Mensual';
}

export interface LotDetail {
    lotNumber: string;
    quantity: number;
    expiryDate: string; // ISO String
}

export interface InventoryItem {
  id: string;
  name: string;
  quantity: number; // This is the calculated total stock from all lots
  unit: string;
  lowStockThreshold: number;
  sku?: string;
  barcode?: string;
  costPrice?: number;
  isControlled?: boolean;
  controlledType?: 'Psicotrópico' | 'Estupefaciente';
  // For fractionation
  activePrincipleContentValue?: number;
  activePrincipleContentUnit?: string;
  itemsPerBaseUnit?: number;
  // Lots
  lots?: LotDetail[];
}

export interface User {
  id: string;
  name: string;
  email: string;
  roleId: string;
}

export interface Role {
  id: string;
  name: string;
  permissions: string[];
}

export interface DispatchItem {
    recipeId: string;
    inventoryItemId: string;
    recipeItemName: string;
    lotNumber: string;
    quantity: number;
}

export interface DispatchNote {
    id: string;
    externalPharmacyId: string;
    status: DispatchStatus;
    createdAt: string; // ISO String
    completedAt?: string; // ISO String
    items: DispatchItem[];
    dispatcherName?: string;
    receivedByName?: string;
    notes?: string;
}

export interface PharmacovigilanceReport {
  id: string;
  reportedAt: string; // ISO String
  reporterName: string;
  recipeId?: string;
  patientId?: string;
  externalPharmacyId?: string;
  involvedMedications: string;
  problemDescription: string;
  status: PharmacovigilanceReportStatus;
  actionsTaken?: string;
  pharmacyResponse?: string;
  resolutionDetails?: string;
  updatedAt: string; // ISO String
}

export interface AppData {
  recipes: Recipe[];
  patients: Patient[];
  doctors: Doctor[];
  inventory: InventoryItem[];
  users: User[];
  roles: Role[];
  externalPharmacies: ExternalPharmacy[];
  dispatchNotes: DispatchNote[];
  pharmacovigilanceReports: PharmacovigilanceReport[];
  controlledSubstanceLog: ControlledSubstanceLogEntry[];
}
