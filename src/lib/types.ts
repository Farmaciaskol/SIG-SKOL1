

export enum RecipeStatus {
  PendingReviewPortal = 'Pendiente Revisión - Portal',
  PendingValidation = 'Pendiente Validación',
  Validated = 'Validada',
  Rejected = 'Rechazada',
  SentToExternal = 'Enviada a Recetario',
  Preparation = 'En Preparación',
  ReceivedAtSkol = 'Recepcionado en Skol',
  ReadyForPickup = 'Lista para Retiro',
  Dispensed = 'Dispensada',
  Cancelled = 'Anulada',
  Archived = 'Archivada',
}

export enum ProactivePatientStatus {
  OK = 'OK', // No action needed
  ATTENTION = 'ATTENTION', // Needs attention, but not urgent
  URGENT = 'URGENT', // Urgent action required
}

export enum PatientActionNeeded {
  NONE = 'NONE',
  CREATE_NEW_RECIPE = 'CREATE_NEW_RECIPE',
  REPREPARE_CYCLE = 'REPREPARE_CYCLE',
  DISPENSE_COMMERCIAL = 'DISPENSE_COMMERCIAL',
}

export enum SkolSuppliedItemsDispatchStatus {
  Pending = 'Pendiente',
  PartiallyDispatched = 'Parcialmente Despachado',
  Dispatched = 'Despachado',
}

export enum DispatchStatus {
  Active = 'Activo',
  Received = 'Recibido',
  Cancelled = 'Cancelado',
}

export enum PharmacovigilanceReportStatus {
  New = 'Nuevo',
  UnderInvestigation = 'En Investigación',
  ActionRequired = 'Acción Requerida',
  Resolved = 'Resuelto',
  Closed = 'Cerrado',
}

export enum PharmacovigilanceSeverity {
    Leve = 'Leve',
    Moderada = 'Moderada',
    Grave = 'Grave',
}

export enum PharmacovigilanceOutcome {
    RecuperadoSinSecuelas = 'Recuperado sin secuelas',
    RecuperadoConSecuelas = 'Recuperado con secuelas',
    NoRecuperado = 'No recuperado',
    Mortal = 'Mortal',
    Desconocido = 'Desconocido',
}


export enum ControlledLogEntryType {
  MagistralDispensation = 'Dispensación Magistral',
  DirectSale = 'Venta Directa',
}

export enum MonthlyDispensationBoxStatus {
  InPreparation = 'En Preparación',
  ReadyForPickup = 'Lista para Retiro',
  Dispensed = 'Dispensada',
  Cancelled = 'Anulada',
}

export enum DispensationItemStatus {
  OkToInclude = 'OK para Incluir',
  RequiresAttention = 'Requiere Atención',
  DoNotInclude = 'No Incluir',
  ManuallyAdded = 'Añadido Manualmente',
}

export enum UserRequestStatus {
    Pending = 'Pendiente',
    Approved = 'Aprobada',
    Rejected = 'Rechazada',
}

export enum OrderStatus {
  Pending = 'Pendiente',
  Processing = 'Procesando',
  Shipped = 'Despachado',
  InTransit = 'En Ruta',
  Delivered = 'Entregado',
  Cancelled = 'Cancelado',
}


export interface UserRequest {
    id: string;
    name: string;
    rut: string;
    email: string;
    firebaseUid?: string; // Set after Firebase Auth user creation on patient side
    status: UserRequestStatus;
    requestedAt: string; // ISO String
    rejectionReason?: string;
}

export interface DispensationItem {
  id: string; // recipeId or inventoryItemId
  type: 'magistral' | 'commercial';
  name: string;
  details: string; // e.g., 'Minoxidil 5%' or 'Losartan 50mg'
  status: DispensationItemStatus;
  reason: string; // Reason for the status, e.g., 'Stock Insufficient'
  pharmacistNotes?: string;
}

export interface MonthlyDispensationBox {
  id: string;
  patientId: string;
  period: string; // YYYY-MM format
  status: MonthlyDispensationBoxStatus;
  items: DispensationItem[];
  createdAt: string; // ISO
  updatedAt: string; // ISO
  dispensedAt?: string; // ISO
  retrievedBy_Name?: string;
  retrievedBy_RUT?: string;
}


export interface ControlledSubstanceLogEntry {
  id: string;
  entryType: ControlledLogEntryType;
  dispensationDate: string; // ISO String
  internalFolio: string; // Auto-generated by Skol
  patientId: string;
  doctorId: string;
  medicationName: string; // Could be the recipe item name or inventory item name
  inventoryItemId?: string; // Link to inventory for commercial products
  recipeId?: string; // Link to recipe for magistral preparations
  quantityDispensed: number;
  quantityUnit: string;
  controlledType: 'Psicotrópico' | 'Estupefaciente';
  prescriptionFolio: string; // Folio from the physical/digital recipe
  prescriptionType: 'Receta Cheque' | 'Receta Retenida';
  retrievedBy_Name: string;
  retrievedBy_RUT: string;
  prescriptionImageUrl?: string;
}

export interface RecipeItem {
  principalActiveIngredient: string;
  pharmaceuticalForm: string;
  concentrationValue: string;
  concentrationUnit: string;
  dosageValue: string;
  dosageUnit: string;
  frequency: string;
  treatmentDurationValue: string;
  treatmentDurationUnit: string;
  totalQuantityValue: string;
  totalQuantityUnit: string;
  usageInstructions: string;
  safetyStockDays?: number;
  isRefrigerated?: boolean;
  requiresFractionation?: boolean;
  sourceInventoryItemId?: string;
}

export interface AuditTrailEntry {
  status: RecipeStatus | MonthlyDispensationBoxStatus;
  date: string; // ISO String
  userId: string;
  notes?: string;
}

export interface Recipe {
  id: string;
  patientId: string;
  doctorId: string;
  dispatchAddress?: string;
  items: RecipeItem[];
  status: RecipeStatus;
  paymentStatus: 'Pagado' | 'Pendiente' | 'N/A';
  rejectionReason?: string;
  dueDate: string; // ISO String
  createdAt: string; // ISO String
  updatedAt: string; // ISO String
  prescriptionDate: string; // ISO String
  externalPharmacyId?: string;
  supplySource?: 'Stock del Recetario' | 'Insumos de Skol';
  preparationCost?: number;
  transportCost?: number;
  isControlled?: boolean;
  controlledRecipeType?: string;
  controlledRecipeFolio?: string;
  prescriptionImageUrl?: string;
  skolSuppliedItemsDispatchStatus?: SkolSuppliedItemsDispatchStatus;
  auditTrail?: AuditTrailEntry[];
  dispensationDate?: string; // ISO String
  internalPreparationLot?: string;
  compoundingDate?: string; // ISO String
  preparationExpiryDate?: string; // ISO String
  isUrgentRepreparation?: boolean;
}

export interface AdverseReaction {
  medication: string;
  description: string;
}

export interface PharmacovigilanceReference {
  reportId: string;
  reportedAt: string;
  problemSummary: string;
  status: PharmacovigilanceReportStatus;
}

export interface Patient {
  id: string;
  name: string;
  rut: string;
  email?: string;
  phone?: string;
  address?: string;
  gender?: 'Masculino' | 'Femenino' | 'Otro';
  isChronic: boolean;
  isHomeCare?: boolean;
  preferredDispensationDay?: number;
  allergies?: string[];
  commercialMedications?: string[];
  adverseReactions?: AdverseReaction[];
  associatedDoctorIds?: string[];
  pharmacovigilanceEvents?: PharmacovigilanceReference[];
  
  // Proactive fields
  proactiveStatus: ProactivePatientStatus;
  proactiveMessage: string;
  actionNeeded: PatientActionNeeded;
  avatar?: string;
  firebaseUid?: string; // To link with Firebase Auth
}

export interface Doctor {
  id: string;
  name: string;
  specialty: string;
  license?: string;
  rut?: string;
  email?: string;
  phone?: string;
}

export interface ExternalPharmacy {
  id: string;
  name: string;
  contactPerson?: string;
  email?: string;
  phone?: string;
  address?: string;
  paymentDetails?: string; // e.g., bank account info
  defaultPaymentModel?: 'Por Receta' | 'Factura Mensual';
  transportCost?: number;
  standardPreparationTime?: number; // Time in days for their own supplies
  skolSuppliedPreparationTime?: number; // Time in days for Skol supplies
}

export interface LotDetail {
    lotNumber: string;
    quantity: number;
    expiryDate: string; // ISO String
}

export interface InventoryItem {
  id: string;
  name: string; // Nombre comercial
  inventoryType: 'Fraccionamiento' | 'Venta Directa';
  activePrinciple?: string;
  sku?: string; // Código Nacional / ISP
  manufacturer?: string;
  barcode?: string;
  
  pharmaceuticalForm?: string;
  doseValue?: number;
  doseUnit?: string;
  administrationRoute?: string;
  packagePresentation?: string;
  
  saleCondition?: string;
  isBioequivalent?: boolean;
  
  isControlled?: boolean;
  controlledType?: 'Psicotrópico' | 'Estupefaciente' | '';
  requiresRefrigeration?: boolean;
  atcCode?: string;

  // For fraccionamiento
  itemsPerBaseUnit?: number;

  // Logistics
  unit: string; // Unidad de compra (caja, frasco)
  quantity: number;
  lowStockThreshold: number;
  maxStock?: number;
  mainProvider?: string;
  location?: string;
  costPrice?: number;
  salePrice?: number;
  lots?: LotDetail[];
  
  // Aditional
  mainIndications?: string;
  attachments?: { name: string; url: string }[];
  internalNotes?: string;
}


export interface User {
  id: string;
  name: string;
  email: string;
  roleId: string;
  avatar?: string;
}

export interface Role {
  id: string;
  name: string;
  permissions: string[];
}

export interface DispatchItem {
    recipeId: string;
    inventoryItemId: string;
    recipeItemName: string;
    lotNumber: string;
    quantity: number;
}

export interface DispatchNote {
    id: string;
    folio: string;
    externalPharmacyId: string;
    status: DispatchStatus;
    createdAt: string; // ISO String
    completedAt?: string; // ISO String
    items: DispatchItem[];
    dispatcherId: string;
    dispatcherName: string;
    receivedByName?: string;
    notes?: string;
}

export interface PharmacovigilanceReport {
  id: string;
  reportedAt: string; // ISO String
  updatedAt: string; // ISO String
  
  // Reporter
  reporterName: string;

  // Patient
  patientId: string;
  patientInfoSnapshot: {
      name: string;
      rut: string;
      age?: number; // Age at time of report
      gender: 'Masculino' | 'Femenino' | 'Otro';
  };
  
  // Medication
  isMagistral: boolean;
  suspectedMedicationName: string;
  recipeId?: string; // If magistral
  dose?: string;
  pharmaceuticalForm?: string;
  administrationRoute?: string;
  treatmentStartDate?: string;
  treatmentEndDate?: string;
  lotNumber?: string;
  
  // Reaction
  reactionStartDate: string;
  problemDescription: string;
  severity: PharmacovigilanceSeverity;
  outcome: PharmacovigilanceOutcome;
  
  // Context
  concomitantMedications?: string;

  // Management
  status: PharmacovigilanceReportStatus;
  actionsTaken?: string;
  pharmacyResponse?: string;
  resolutionDetails?: string;

  // Deprecated - kept for backwards compatibility if needed, but new reports won't use it
  involvedMedications?: string; 
  externalPharmacyId?: string; // Can be derived from recipe if available
}

export interface PatientMessage {
    id: string;
    patientId: string;
    content: string;
    sender: 'patient' | 'pharmacist';
    createdAt: string; // ISO String
    read: boolean;
}

export interface AppSettings {
    id: 'global';
    pharmaceuticalForms: string[];
    concentrationUnits: string[];
    dosageUnits: string[];
    treatmentDurationUnits: string[];
    quantityToPrepareUnits: string[];
}

export interface OrderItem {
  productId: string; // Lioren product ID
  name: string;
  quantity: number;
  price: number; // Price per item at time of order
}

export interface Order {
  id: string;
  patientId: string;
  items: OrderItem[];
  total: number;
  status: OrderStatus;
  createdAt: string; // ISO String
  prescriptionImageUrl?: string;
}

export interface LiorenStock {
  sucursal_id: number;
  nombre: string;
  stock: number;
}

export interface LiorenProduct {
  id: number;
  nombre: string;
  exento: number;
  codigo: string; // SKU
  unidad: string;
  param1: string;
  param2: string;
  param3: string;
  param4: string;
  descripcion?: string;
  activo: number;
  preciocompraneto: number;
  precioventabruto: number;
  cod_imp_venta: string;
  cod_imp_compra: string;
  peso: number;
  largo: string;
  ancho: string;
  alto: string;
  stocks: LiorenStock[];
  atributos: any[];
  otrosprecios: any[];
}

export interface Bodega {
    id: number;
    nombre: string;
    sucursal_id: number | null;
}

export interface AppData {
  recipes: Recipe[];
  patients: Patient[];
  doctors: Doctor[];
  inventory: InventoryItem[];
  users: User[];
  roles: Role[];
  externalPharmacies: ExternalPharmacy[];
  dispatchNotes: DispatchNote[];
  pharmacovigilanceReports: PharmacovigilanceReport[];
  controlledSubstanceLog: ControlledSubstanceLogEntry[];
  monthlyDispensations: MonthlyDispensationBox[];
  patientMessages: PatientMessage[];
  userRequests: UserRequest[];
  orders: Order[];
  appSettings?: AppSettings;
}
